{
    "description": "Festifriends project rules for AI code assistance in Cursor",
    "project_context": "Festifriends is a mobile application built with Kivy and Python that allows users to create groups with friends for location sharing at large events, festivals, concerts, and raves. Core features include building squads, marking meetup locations, sharing individual locations, festival maps with event locations, event schedule pages, and safety features. The most important features are user logins, user databases, realtime mobile location sharing, database management, event maps, real world location to pixel coordinate conversions, group creation, and group management.",
    "development_environment": "Development occurs on Windows with testing/deployment on Ubuntu VM via Oracle VirtualBox. Buildozer is used for Android packaging. All code must be compatible with this cross-platform setup.",
    "rules": [
      {
        "title": "Respect Full Project Context",
        "description": "All code suggestions must consider the full codebase context, imports, and architecture. No standalone or generic code unless explicitly requested. Focus on the core Festifriends features: location sharing, squad management, event maps, and user authentication."
      },
      {
        "title": "Kivy Application Architecture",
        "description": "Ensure class-based screen definitions are preserved, use Kivy widgets appropriately, and maintain app flow logic (e.g., screen transitions, App.current_user usage). Follow Kivy best practices for mobile app development."
      },
      {
        "title": "Avoid Placeholder or Incompatible Code",
        "description": "All code must be runnable within the current mobile-oriented project. Avoid unverified packages or modules not compatible with Buildozer. Ensure all dependencies work on Android deployment."
      },
      {
        "title": "Respect Known Dependency Versions",
        "description": "Use: plyer==2.0.0, protobuf==3.17.3, python3.10. Stick to confirmed working versions unless version update is part of the request. Verify compatibility with Buildozer before suggesting new dependencies."
      },
      {
        "title": "Formatting Style",
        "description": "Use 4 spaces for indentation. Limit line length to 100 characters. Use snake_case for variables and functions. Classes use PascalCase. Leave 1 blank line between functions. Follow PEP 8 guidelines."
      },
      {
        "title": "KV File Usage",
        "description": "Prefer Python-based UI when possible, but if KV is used, maintain naming consistency between KV `id` references and Python class variables. Avoid placing logic in KV files. Keep UI and logic separation clean."
      },
      {
        "title": "Camera, GPS, and Device Features",
        "description": "When using Plyer or device features, always verify platform support. Wrap hardware usage in try/except blocks and check platform compatibility before execution. Handle Android-specific permissions properly."
      },
      {
        "title": "Only Suggest Code When Relevant",
        "description": "Only provide edits for explicitly selected code or discussed files/functions. Avoid refactoring unrelated code or suggesting speculative changes. Focus on the specific task requested."
      },
      {
        "title": "Basic Test Coverage Expectations",
        "description": "For logic-heavy functions, suggest testable methods and include example test functions when requested. Prioritize business logic over UI for test coverage. Focus on core functionality testing."
      },
      {
        "title": "Comment and Explain Code",
        "description": "Provide inline comments for all new or modified logic. Write explanations for changes especially if logic is complex or beginner-facing. Document complex algorithms and business logic clearly."
      },
      {
        "title": "Comprehensive Error Handling and Logging",
        "description": "Replace all print() statements with proper logging. Implement try/except blocks for all file operations, database queries, and external API calls. Use structured error messages and handle edge cases gracefully. Never leave debug print statements in production code."
      },
      {
        "title": "Database and State Management",
        "description": "Implement proper data persistence patterns. Avoid global variables for user state - use App.current_user consistently. Ensure database operations are atomic and handle concurrent access. Validate all user inputs before database operations."
      },
      {
        "title": "Code Quality and Maintenance",
        "description": "Remove all TODO comments by implementing proper solutions. Use type hints for function parameters and return values. Implement proper validation for user inputs (email format, coordinate ranges, etc.). Follow DRY principles and avoid code duplication."
      },
      {
        "title": "User Experience and Input Validation",
        "description": "Implement comprehensive input validation for all user inputs (coordinates, usernames, emails). Provide clear error messages to users. Handle edge cases like empty inputs, invalid formats, and boundary conditions. Use proper UI feedback for all user actions."
      },
      {
        "title": "Security and Data Protection",
        "description": "Never store passwords in plain text. Implement proper password hashing. Validate and sanitize all user inputs to prevent injection attacks. Use secure methods for storing sensitive data. Implement proper session management and user authentication flows."
      },
      {
        "title": "Cross-Platform Compatibility",
        "description": "All code must work on both Windows (development) and Ubuntu VM (testing). Use os.path.join() for file paths, avoid Windows-specific paths or commands. Use platform-agnostic libraries and avoid OS-specific dependencies. Test file operations work in both environments."
      },
      {
        "title": "Buildozer and Android Compatibility",
        "description": "All dependencies must be Buildozer-compatible. Avoid packages requiring compilation or native extensions unless verified. Use pure Python libraries when possible. Test all imports work in Ubuntu environment. Follow Buildozer requirements.txt format for dependencies."
      },
      {
        "title": "Virtual Machine Considerations",
        "description": "Avoid code that requires specific hardware acceleration or GPU features that may not work in VirtualBox. Use software rendering fallbacks. Avoid memory-intensive operations that could exceed VM limits. Test performance in constrained VM environment."
      },
      {
        "title": "File System and Path Handling",
        "description": "Use relative paths and avoid absolute paths. Handle file separators correctly for cross-platform compatibility. Use pathlib or os.path for all file operations. Ensure database files and assets are accessible in both Windows and Ubuntu environments."
      },
      {
        "title": "Development Environment Isolation",
        "description": "Avoid hardcoded paths to Windows-specific locations. Use environment variables or relative paths for configuration. Ensure all dependencies are properly specified in requirements.txt. Test that code runs without modification in Ubuntu VM."
      },
      {
        "title": "Systematic UI Updates",
        "description": "When making UI changes (button sizes, layouts, styling), systematically update ALL related screens and components. Do not apply changes to only some screens while leaving others inconsistent. Always verify the scope of changes across the entire application and ensure consistency. When in doubt, ask for clarification on which screens need updates."
      },
      {
        "title": "Linter Error Management",
        "description": "Ignore Kivy-specific linter errors (like 'bind' attribute unknown) as these are false positives from the linter not understanding Kivy's dynamic attribute system. Focus on actual runtime errors and logical issues instead of linter warnings for Kivy widgets. Document known linter limitations in project README."
      },
      {
        "title": "Image Asset Management",
        "description": "Use PNG format for icons when transparency is needed. Provide fallback rendering for all image assets (like red circles for failed pin images). Standardize icon sizes (32x32 pixels for consistency). Validate image files before adding to database. Handle missing or corrupted image files gracefully."
      },
      {
        "title": "Database Schema Evolution",
        "description": "Version database schemas - add version field to track format changes. Maintain backward compatibility - always handle missing fields gracefully. Create migration scripts to update old database formats. Document schema changes in commit messages. Validate data integrity after schema changes."
      },
      {
        "title": "Error Handling Patterns",
        "description": "Implement consistent error handling - always catch exceptions and provide meaningful error messages. Use graceful degradation - fallback to default values when resources are missing. Provide user feedback - show appropriate error messages to users (not just console prints). Use proper logging instead of print statements for debugging."
      },
      {
        "title": "Resource Loading",
        "description": "Validate resources before loading - check if files exist before trying to load them. Provide default resources - always have fallback resources available. Use relative paths consistently. Organize assets in dedicated folders for different asset types. Handle resource loading failures gracefully."
      },
      {
        "title": "UI Component Consistency",
        "description": "Use standardized button sizes - consistent size_hint values (e.g., (1, 0.08) for buttons). Maintain consistent spacing - uniform padding and spacing values. Define standard font sizes for different UI elements. Use consistent color scheme variables throughout the app. Ensure visual consistency across all screens."
      },
      {
        "title": "State Management",
        "description": "Use centralized state management - app-level properties for shared state. Always validate state - check if objects exist before accessing their properties. Implement state persistence - save important state to prevent loss on screen transitions. Ensure proper initialization order - avoid NoneType errors."
      },
      {
        "title": "Code Organization",
        "description": "Maintain separation of concerns - keep UI logic separate from business logic. Use screen lifecycle methods - on_enter() for dynamic content loading. Create modular components - break large screens into smaller, reusable components. Use consistent naming conventions across all files. Keep functions focused and single-purpose."
      },
      {
        "title": "Testing Strategy",
        "description": "Create manual testing checklists for new features. Maintain test data management - test databases with known good data. Validate features end-to-end before considering them complete. Perform regression testing - ensure new features don't break existing functionality. Test cross-platform compatibility."
      },
      {
        "title": "Documentation Standards",
        "description": "Add inline documentation - docstrings to all new functions. Document database schema changes. Keep setup and deployment instructions current. Maintain list of known issues and workarounds. Document complex algorithms and business logic clearly."
      },
      {
        "title": "Performance Considerations",
        "description": "Implement caching for frequently accessed data. Use lazy loading - load data only when needed. Perform efficient updates - update only changed data instead of reloading everything. Practice proper memory management - clean up resources properly. Avoid unnecessary database queries and file operations."
      },
      {
        "title": "Security Practices",
        "description": "Always validate user inputs before processing. Implement proper access control - check user permissions before allowing actions. Sanitize data before storing in databases. Avoid exposing sensitive information in error messages. Use secure methods for storing and transmitting data."
      }
    ]
}
  